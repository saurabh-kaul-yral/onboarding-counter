FROM rustlang/rust:nightly-bookworm as builder

# Install cargo-binstall for easier tool installation
RUN wget https://github.com/cargo-bins/cargo-binstall/releases/latest/download/cargo-binstall-x86_64-unknown-linux-musl.tgz
RUN tar -xvf cargo-binstall-x86_64-unknown-linux-musl.tgz
RUN cp cargo-binstall /usr/local/cargo/bin

# Install system dependencies
RUN apt-get update -y \
    && apt-get install -y --no-install-recommends \
    clang \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Install cargo-leptos
RUN cargo binstall cargo-leptos -y

# Add WASM target for client-side compilation
RUN rustup target add wasm32-unknown-unknown

# Create app directory
WORKDIR /app

# Copy dependency manifests first for better caching
COPY Cargo.toml Cargo.lock ./
COPY rust-toolchain.toml ./

# Copy source code
COPY src ./src
COPY style ./style
COPY public ./public

# Set production environment variables for build
ENV DEPLOYMENT_ENV=prod
ARG COUNTER_CANISTER_ID
ARG CALLER_CANISTER_ID
ENV COUNTER_CANISTER_ID=${COUNTER_CANISTER_ID}
ENV CALLER_CANISTER_ID=${CALLER_CANISTER_ID}

# Build the application for production
RUN cargo leptos build --release -vv

# =============================================================================
# RUNTIME STAGE  
# =============================================================================
FROM debian:bookworm-slim as runtime

# Install runtime dependencies
RUN apt-get update -y \
    && apt-get install -y --no-install-recommends \
    openssl \
    ca-certificates \
    && apt-get autoremove -y \
    && apt-get clean -y \
    && rm -rf /var/lib/apt/lists/*

# Create app directory and user for security
RUN useradd -m -u 1001 appuser
WORKDIR /app

# Copy the built application binary
COPY --from=builder /app/target/release/onboarding-counter /app/
COPY --from=builder --chown=appuser:appuser /app/target/release/onboarding-counter /app/

# Copy web assets (JS/WASM/CSS generated by leptos)
COPY --from=builder --chown=appuser:appuser /app/target/site /app/site

# Copy static assets
COPY --from=builder --chown=appuser:appuser /app/public /app/public

# Copy style files (needed for SCSS compilation)
COPY --from=builder --chown=appuser:appuser /app/style /app/style

# Copy configuration files
COPY --from=builder --chown=appuser:appuser /app/Cargo.toml /app/
COPY --from=builder --chown=appuser:appuser /app/rust-toolchain.toml /app/

# Set proper permissions
RUN chmod +x /app/onboarding-counter
RUN chown -R appuser:appuser /app

# Switch to non-root user for security
USER appuser

# Set environment variables
ENV RUST_LOG="info"
ENV LEPTOS_SITE_ADDR="0.0.0.0:8080"
ENV LEPTOS_SITE_ROOT="site"

# Production environment variables (can be overridden at runtime)
ENV DEPLOYMENT_ENV=prod

# Expose the application port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/ || exit 1

# Run the server
CMD ["/app/onboarding-counter"]